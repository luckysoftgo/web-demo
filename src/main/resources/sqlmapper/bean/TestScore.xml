<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="TestScore">

	<!-- 输出列 -->
	<sql id="baseColumnList">
		u.score_id as scoreId ,
		u.uuid as uuid ,
		u.create_time as createTime ,
		u.name as name ,
		u.score as score 
	</sql>
	
	
	<!-- 查询的列 -->
	<sql id="searchCriteria">
        <include refid="Util.baseSelect" />
		<if test="scoreId != null and scoreId != ''">
		and u.score_id = #{scoreId,jdbcType=VARCHAR}
		</if>
		<if test="name != null and name != ''">
		and u.name = #{name,jdbcType=VARCHAR}
		</if>
		<if test="nameLike != null and nameLike != ''">
		and u.name like CONCAT('%',#{nameLike,jdbcType=VARCHAR},'%') 
		</if>
		<if test="score != null and score !=-1  ">
		and u.score = #{score,jdbcType=NUMERIC}
		</if>
	</sql>


	<!-- 查询列表数据 -->
	<select id="queryListResult" parameterType="java.util.Map" flushCache="false" resultType="com.javabase.demo.entity.test.TestScore">
		select
			<include refid="baseColumnList" />
		from
			test_score u
		where
			<![CDATA[ u.score_id <> '' AND u.score_id is not NULL ]]>
			<include refid="searchCriteria" />
			<include refid="Util.orderCriteria" />
			<include refid="Util.mysqlPage" />
	</select>
	
	
	<!-- 查询总数 -->
	<select id="queryListResultCount" parameterType="java.util.Map" flushCache="false" resultType="java.lang.Integer">
		select
			count(u.score_id)
		from
			test_score u
		where
			<![CDATA[ u.score_id <> '' AND u.score_id is not NULL ]]>
			<include refid="searchCriteria" />
	</select>
	
	<!-- 查询所有列表数据 -->
	<select id="queryAllListResult" parameterType="java.util.Map" flushCache="false" resultType="com.javabase.demo.entity.test.TestScore">
		select
			<include refid="baseColumnList" />
		from
			test_score u
		where
			<![CDATA[ u.score_id <> '' AND u.score_id is not NULL ]]>
			<include refid="searchCriteria" />
			<include refid="Util.orderCriteria" />
	</select>
	
	
	<!-- 自定义查询列表where条件 -->
	<!-- statementType="STATEMENT":非预编译;PREPARED:预编译;CALLABLE:调用存储过程 -->
	<select id="queryListResultByWhere" parameterType="java.util.Map" statementType="STATEMENT" flushCache="false" resultType="com.javabase.demo.entity.test.TestScore">
		select
			<include refid="baseColumnList" />
		from
			test_score u
		where
			<![CDATA[ u.score_id <> '' AND u.score_id is not NULL ]]>
		    <if test="whereSqlStr != null and whereSqlStr != ''">
			and ${whereSqlStr}
			</if>
	</select>
	
	
	<!-- 自定义查询列表where条件 -->
	<!-- statementType="STATEMENT":非预编译;PREPARED:预编译;CALLABLE:调用存储过程 -->
	<select id="queryListResultCountByWhere" parameterType="java.util.Map" statementType="STATEMENT" flushCache="false" resultType="java.lang.Integer">
		select
			count(u.score_id)
		from
			test_score u
		where
			<![CDATA[ u.score_id <> '' AND u.score_id is not NULL ]]>
			<if test="whereSqlStr != null and whereSqlStr != ''">
			and ${whereSqlStr}
			</if>
	</select>
	
	
	<!-- 查询一条数据 -->
	<select id="querySingleResultById"  parameterType="java.lang.String"  flushCache="false" resultType="com.javabase.demo.entity.test.TestScore">
		select
			<include refid="baseColumnList" />
		from
			test_score u
		where
			<![CDATA[ u.score_id <> '' AND u.score_id is not NULL ]]>
			and u.score_id = #{scoreId,jdbcType=VARCHAR}
	</select>
	
	
	<!-- 通过uuid查询 -->
	<select id="querySingleResultByUUId" parameterType="java.lang.String" flushCache="false" resultType="com.javabase.demo.entity.test.TestScore">
		select
			<include refid="baseColumnList" />
		from
			test_score u
		where
			<![CDATA[ u.score_id <> '' AND u.score_id is not NULL ]]>
			and u.uuid = #{uuid,jdbcType=VARCHAR}
	</select>
	
	
	<!-- 通过属性查询 -->
	<select id="querySingleResultByParams" parameterType="java.util.Map" flushCache="false" resultType="com.javabase.demo.entity.test.TestScore">
		select
			<include refid="baseColumnList" />
		from
			test_score u
		where
			<![CDATA[ u.score_id <> '' AND u.score_id is not NULL ]]>
			<include refid="searchCriteria" />
	</select>


	<!-- 保存对象,返回主键设置 -->
	<insert id="saveObject" parameterType="com.javabase.demo.entity.test.TestScore" useGeneratedKeys="true" keyProperty="scoreId" keyColumn="score_id" flushCache="true" >
		insert into test_score (
			score_id,
			uuid,
			create_time,
			name,
			score
		) values (
			#{scoreId,jdbcType=VARCHAR},
			#{uuid,jdbcType=VARCHAR},
			#{createTime,jdbcType=TIMESTAMP},
			#{name,jdbcType=VARCHAR},
			#{score,jdbcType=NUMERIC}
		)
	</insert>
	
	
	<insert id="saveBatchObject" parameterType="java.util.ArrayList" flushCache="true" >
		insert into test_score (
			score_id,
			uuid,
			create_time,
			name,
			score
		) values 
		<foreach collection="list" item="item" index="index" separator=",">
		(
			#{item.scoreId,jdbcType=VARCHAR},
			#{item.uuid,jdbcType=VARCHAR},
			#{item.createTime,jdbcType=TIMESTAMP},
			#{item.name,jdbcType=VARCHAR},
			#{item.score,jdbcType=NUMERIC}
		)
		</foreach>
	</insert>


	<!-- 修改条件 -->
	<sql id="updateColumnWhere">
		<set>
			u.create_time = #{createTime,jdbcType=TIMESTAMP}
		<if test="name != null and name != ''">
			, u.name = #{name,jdbcType=VARCHAR}
		</if>
		<if test="score != null and score !=-1 ">
			, u.score = #{score,jdbcType=NUMERIC}
		</if>
		</set>		
	</sql>

	<!-- 修改 -->
	<update id="updateObjectById" flushCache="true" parameterType="com.javabase.demo.entity.test.TestScore">
		update test_score u
			<include refid="updateColumnWhere" />
		where
            u.score_id = #{scoreId,jdbcType=VARCHAR}
	</update>
	
	
	<!-- 修改 -->
	<update id="updateObjectByUUId" flushCache="true" parameterType="com.javabase.demo.entity.test.TestScore">
		update test_score u
		<include refid="updateColumnWhere" />
		where
            u.uuid = #{uuid,jdbcType=VARCHAR}
	</update>
	
	
	<!-- 自定义修改列以及修改条件 -->
	<!-- statementType="STATEMENT":非预编译;PREPARED:预编译;CALLABLE:调用存储过程 -->
	<update id="updateCustomColumnByWhere" flushCache="true" parameterType="java.util.Map" statementType="STATEMENT">
		update test_score ${updateSqlStr} where ${whereSqlStr}
	</update>
	 
	
	
	
	<!-- 物理删除 -->
	<delete id="physicalDelete" flushCache="true"  parameterType="java.lang.String"  >
		delete from test_score where score_id = #{scoreId,jdbcType=VARCHAR}
	</delete>
	
	
	<!-- 自定义物理条件 -->
	<delete id="physicalWhereDelete" flushCache="true" parameterType="java.util.Map" statementType="STATEMENT">
		delete from test_score where ${whereSqlStr}
	</delete>
	
	
</mapper>
